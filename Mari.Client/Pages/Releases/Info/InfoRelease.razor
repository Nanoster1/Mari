@using Mari.Client.Models.Releases
@using Mari.Client.Common.Interfaces.Formatters

@attribute [Route(ClientRoutes.Pages.ReleasesInfo)]
@inject IReleaseManager ReleaseManager
@inject IDescriptionFormatter DescriptionFormatter
@inject IDateFormatter DateFormatter

<MudPaper Elevation="0" Height="100%">

    <MudContainer Class="my-auto" MaxWidth="MaxWidth.Medium" Style="display: flex; flex-direction: row;">
     
        <MudContainer MaxWidth="MaxWidth.Medium" Style="display: flex; flex-direction: column;">
            
            <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                       OnClick="BackButtonClick" Href="@ClientRoutes.Pages.Index">Вернуться</MudButton>
   

            <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-5 d-flex justify-space-between">
                <MudContainer> 
                    <MudText Typo="Typo.h5">Платформа: @Release.PlatformName</MudText>
                </MudContainer>
                <MudContainer Class=" d-flex flex-row-reverse">
                     <MudButton  Variant="Variant.Filled" Color="Color.Primary" OnClick="RightDrawerButtonOnClick">Дополнительно</MudButton>
                   <MudIconButton Title="Редактировать" Class="mr-4" Icon="@Icons.Filled.Edit" OnClick="SwitchEditRelease" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
                </MudContainer>

            </MudContainer>

            <MudContainer MaxWidth="MaxWidth.Medium" Class="my-5" Style="display: flex; flex-direction: row;">

                <MudContainer Class="px-0" MaxWidth="MaxWidth.Medium" Style="display: flex; flex-direction: column;">
                    <MudText>Версия: @($"{Release.Version.Major.ToString()}.{Release.Version.Minor.ToString()}.{Release.Version.Patch.ToString()}")</MudText>
                      <MudLink Href="@Release.MainIssue">Релиз задача</MudLink>
                    <MudText>Статус: @Release.Status</MudText>
                </MudContainer>

                <MudContainer MaxWidth="MaxWidth.Medium" Style="display: flex; flex-direction: column; justify-content: space-between">
                    <MudText>Дата изменения: @DateFormatter.FormatDateTime(Release.UpdateDate)</MudText>
                    <MudText>Дата завершения: @DateFormatter.FormatDate(Release.CompleteDate)</MudText>
                </MudContainer>
            </MudContainer>

            <MudContainer MaxWidth="MaxWidth.Medium">
                <MudText Typo="Typo.h5">Информация о релизе при его создании (Фио создателя релиза)</MudText>
            </MudContainer>
            <MudContainer MaxWidth="MaxWidth.Medium" Class="my-3">
                <MudText>
                   @DescriptionFormatter.Format(Release.Description)
                 </MudText>
            </MudContainer>
            
            
            <MudDrawer  @bind-Open="IsRightDrawerOpened" Width="400px" Height="100%" Anchor="Anchor.Right">
                <MenuRelease Id="@Id" ClickOnEditingRelease="SwitchEditRelease"/>
            </MudDrawer>
        </MudContainer>
        
    </MudContainer>
</MudPaper>

@if (openEditingRelease)
{
    <CardEditRelease Release="Release" SwitchEditRelease="SwitchEditRelease" GetUpdateUser="GetUpdateUser" />
}

@code {

    
    [Parameter] 
    public string Id { get; set; } 

    private bool IsRightDrawerOpened { get; set; } = false;
    private bool openEditingRelease { get; set; } = false;

    private ReleaseModel Release { get; set; } = new ReleaseModel();

    public async void SwitchEditRelease()
    {
        IsRightDrawerOpened = false;
        openEditingRelease = !openEditingRelease;
    }
    
    public async void GetUpdateUser()
    {
        Release = await ReleaseManager.GetById(Guid.Parse(Id));
        IsRightDrawerOpened = false;
        openEditingRelease = false;
        StateHasChanged();
    }
    
    private void BackButtonClick()
    {
        IsRightDrawerOpened = false;
        
        StateHasChanged();
    }
    
    private void RightDrawerButtonOnClick()
    {
        IsRightDrawerOpened = !IsRightDrawerOpened;
        
        StateHasChanged();
    }


    protected override async Task OnInitializedAsync()
    {
        Release = await ReleaseManager.GetById(Guid.Parse(Id));
        
    //Todo Тестовые данные
        /*Release = new ReleaseModel
        {
            Id = Guid.NewGuid(),
            Version = new VersionModel{Major = 1,Minor = 1,Patch = 1},
            PlatformName = "Android", Status = "Testing",
            CompleteDate = new DateTime(2022, 11, 11),
            UpdateDate = new DateTime(2022, 11, 11),
            MainIssue = "http",
            Description = "GG"
        };*/
    }

}
    

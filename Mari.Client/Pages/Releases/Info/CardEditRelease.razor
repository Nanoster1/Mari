@using Mari.Contracts.Releases
@using System.Data
@using Mari.Client.Models.Releases
@using Mari.Contracts.Releases.Responses
@using Microsoft.AspNetCore.Components
@inject HttpClient Client
@inject IReleaseManager ReleaseManager


<MudPaper Class="paper-edit-release" Elevation="0">
    <MudCard Class="border card-create-release">

        <MudForm @ref="_form" Model="@EditRelease" @bind-IsValid="@_success">
            <MudCardActions Class="pb-0">
                <!-- TODO доделать OnClick -->
                <MudIconButton Class="ml-auto" OnClick="SwitchEditRelease" Icon="@Icons.Filled.Close" />
            </MudCardActions>

            <MudCardContent Class="pt-0">
                
                <MudDatePicker @bind-Date="EditRelease.CompleteDateTime" @ref="DatePicker"  Label="Дата Завершения">
                    <PickerActions>
                        <MudButton Class="mr-auto align-self-start" OnClick="@(() => DatePicker.Clear())">Очистить</MudButton>
                        <MudButton OnClick="@(() => DatePicker.Close(false))">Закрыть</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => DatePicker.Close())">Сохранить</MudButton>
                    </PickerActions>
                </MudDatePicker>
                
                 <MudAutocomplete ResetValueOnEmptyText="true"
                                 Immediate="true" T="string" Label="Платформа" CoerceValue="true"
                                 @bind-Value="EditRelease.PlatformName" SearchFunc="@SearchPlatform"
                                 Validation="@(new Func<string, IEnumerable<string>>(ValidatePlatform))" Required/>
                
                   <MudContainer Class="flex-row d-flex align-end px-0 flex-grow-1 gap-1">
                        <MudText >Версия: </MudText>
                       <MudTextField @bind-Value="EditRelease.Version.Major"  Class="flex-none" Style="max-width: 28px"
                                     Variant="Variant.Text" MaxLength="2" Immediate="true"
                                     Required RequiredError="@String.Empty"/>
                        <MudText >.</MudText>
                       <MudTextField @bind-Value="EditRelease.Version.Minor" Class="flex-none" Style="max-width: 28px"
                                     Variant="Variant.Text" MaxLength="2" Immediate="true"
                                     Required RequiredError="@String.Empty"/>
                        <MudText>.</MudText>
                       <MudTextField @bind-Value="EditRelease.Version.Patch" Class="flex-none" Style="max-width: 28px"
                                     Variant="Variant.Text" MaxLength="2" Immediate="true"
                                     Required RequiredError="@String.Empty"/>
                    </MudContainer>
               
                
                <MudTextField @bind-Value="EditRelease.Status" Disabled="true" Immediate="true" Label="Статус" />

                <MudTextField @bind-Value="EditRelease.MainIssue"   Immediate="true"
                              Label="Ссылка на релиз задачу"/>

                <MudTextField @bind-Value="EditRelease.Description"  Immediate="true"
                    Variant="Variant.Filled" Lines="5" Label="Информация" />

            </MudCardContent>

            <MudCardActions>
                <MudButton OnClick="ClickOnEditRelease" Variant="Variant.Filled"
                           Color="Color.Primary" Class="mx-auto" Disabled="@(!_success)">
                    Изменить
                </MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudPaper>


@code {
    
    private MudForm _form;
    private bool _success;
    
    private IList<PlatformModel> Platforms { get; set; }
    private string[] AllNamePlatforms { get; set; }

    [Parameter]
    public Action SwitchEditRelease { get; set; } = () => { };
    
    [Parameter]
    public Action GetUpdateUser { get; set; }

    [Parameter]
    public ReleaseModel Release { get; set; } = new ReleaseModel();
    
    public ReleaseModel EditRelease { get; set; } = new ReleaseModel();
    
	MudDatePicker DatePicker;

    protected override async Task OnInitializedAsync()
    {
         Platforms = await ReleaseManager.GetAllPlatforms();
            
            
        /*// TODO Тестовые данные
            Platforms = new List<PlatformResponse>()
            {
                new PlatformResponse("Android",1,1,1),
                new PlatformResponse("Ios",1,1,1)
            };
        // конец*/
        
        AllNamePlatforms = Platforms.Select(x => x.Name).ToArray();

        EditRelease = new ReleaseModel
        {
           Id = Release.Id,
           Version = Release.Version,
           PlatformName = Release.PlatformName,
           Status = Release.Status,
           CompleteDate = Release.CompleteDate,
           UpdateDate = Release.UpdateDate,
           MainIssue = Release.MainIssue,
           Description = Release.Description
        };
    }

    private async Task<IEnumerable<string>> SearchPlatform(string value)
    {
        await Task.Delay(5);

        return string.IsNullOrEmpty(value) ? AllNamePlatforms
            : AllNamePlatforms.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    public async void ClickOnEditRelease()
    {
        await ReleaseManager.Update(EditRelease);
        GetUpdateUser();
        StateHasChanged();
    }
    
    private IEnumerable<string> ValidatePlatform(string value)
    {
        if (!string.IsNullOrWhiteSpace(value)) yield break;
        yield return "Заполните платформу";
    }
}